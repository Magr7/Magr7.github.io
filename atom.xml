<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seven Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-16T05:40:05.967Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Magr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊 Interface 在 Laravel 开发中的使用</title>
    <link href="http://example.com/2022/05/16/%E8%81%8A%E8%81%8A%20Interface%20%E5%9C%A8%20Laravel%20%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/05/16/%E8%81%8A%E8%81%8A%20Interface%20%E5%9C%A8%20Laravel%20%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-16T03:30:50.535Z</published>
    <updated>2022-05-16T05:40:05.967Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你也许听过面向接口编程，而不是面向对象编程的设计思想，如 代码到接口，而不是实现，程序到接口，使用抽象而不是具体化等。<br>这些所指的都是同一件事，在开发中我们的应用程序应该依赖于抽象（接口）而不是具体的（类）。</p></blockquote><h5 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h5><hr><p>这是我第一次听到这个说法时的反应。为什么我要使用接口而不是类？意味着我需要创建一个接口，我还要创建一个实现该接口的类？？？这不是浪费时间吗？</p><ul><li>当然这样设计是有意义的<blockquote><p>在架构师的眼中「没有什么是不会变化的」，或者说 改变 才是 不变 的。<br>我们开发的业务需求随时间和不断扩张而变化，我们的代码也是如此。<br>所以我们的代码必须灵活。<br>代码到接口使我们的代码松散耦合且灵活。</p></blockquote></li></ul><h5 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h5><hr><p>请看以下代码示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$content</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出 Log 日志到文件。</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Log to file&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的 Logger 类将日志记录到文件，我们来在控制器中调用它。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$logger</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>();</span><br><span class="line">        <span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&#x27;Log this&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果我们想记录其他位置，如数据库、文件、云或其他呢？<br>我们在 Logger 类中再添加几个方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logToDb</span>(<span class="params"><span class="variable">$content</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出日志到 DB。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logToFile</span>(<span class="params"><span class="variable">$content</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出 Log 日志到文件。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logToCloud</span>(<span class="params"><span class="variable">$content</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出 Log 日志到云。</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们还要在 LoggerController 中添加判断：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$logger</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$target</span> = <span class="title function_ invoke__">config</span>(<span class="string">&#x27;log.target&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&#x27;Log this.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$target</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;db&#x27;</span>:</span><br><span class="line">                <span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">logToDb</span>(<span class="variable">$content</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                <span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">logToFile</span>(<span class="variable">$content</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">logToCloud</span>(<span class="variable">$content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，我们现在可以通过配置文件把日志输出到各种终端。但我们如果还要再输出日志到 redis 呢？我们还需要再增加一个方法，并且在控制器中再加一次判断。<br>控制器代码很快就变得臃肿，如果还要输出日志到更多地方呢？Logger 类中每个方法如果还需要扩展呢？这对于后期维护来说并不好。<br>这样做同时也不符合 SOLID 原则，我们先来拆分一下 Logger 类，将职责拆分成不同的类。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DBLogger.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Logs</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBLogger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出日志到 DB。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FileLogger.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Logs</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLogger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出 Log 日志到文件。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CouldLogger.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Logs</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudLogger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出 Log 日志到云。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来修改 LogController：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$target</span> = <span class="title function_ invoke__">config</span>(<span class="string">&#x27;log.target&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$target</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;db&#x27;</span>:</span><br><span class="line">                (<span class="keyword">new</span> <span class="title class_">DBLogger</span>())-&gt;<span class="title function_ invoke__">log</span>(<span class="variable">$content</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                (<span class="keyword">new</span> <span class="title class_">FileLogger</span>())-&gt;<span class="title function_ invoke__">log</span>(<span class="variable">$content</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                (<span class="keyword">new</span> <span class="title class_">CouldLogger</span>())-&gt;<span class="title function_ invoke__">log</span>(<span class="variable">$content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看上去还行，我们拆分了 Logger，如果需要添加输出日志到 redis，那就继续再加 case 吧。</p><p>但依然有一个问题就是我们的控制器「知道太多了」，它应该只去调用一个 <code>log()</code> 方法来记录，而不应该知道使用哪个 Logger 类，也不应该去实例化任何类，这样在将来有改动的时候，不论是要输出到哪里，我们都不需要再来修改 <code>LogController</code> 的代码，那应该怎么做呢？</p><h5 id="Interface-出场"><a href="#Interface-出场" class="headerlink" title="Interface 出场"></a>Interface 出场</h5><hr><p>这种情况最适合使用接口来实现了，什么是接口呢？</p><blockquote><p>接口是定义对象可以哪些执行操作的描述。<br>回到我们的代码，控制器只需要一个带有 <code>log()</code> 方法的 Logger 类，所以我们的接口也必须定义一个 <code>log()</code> 方法。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LogInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$content</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我一般把 Interface 接口文件放在项目的 App\Contracts 文件夹<br>接口只包含方法声明而不包含它的实现，这就是它被称为 <code>抽象</code> 的原因。<br>在我们实现接口时，实现接口的类必须提供接口中定义的 <code>抽象方法</code> 的实现细节。<br>再回到我们的代码，我们改写成以下：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LogController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">LogInterface <span class="variable">$logger</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&#x27;log to&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DBLogger.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Logs</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Contracts</span>\<span class="title">LogInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBLogger</span> <span class="keyword">implements</span> <span class="title">LogInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出日志到 DB。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FileLogger.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Logs</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Contracts</span>\<span class="title">LogInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLogger</span> <span class="keyword">implements</span> <span class="title">LogInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出 Log 日志到文件。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CouldLogger.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Logs</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Contracts</span>\<span class="title">LogInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CouldLogger</span> <span class="keyword">implements</span> <span class="title">LogInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出 Log 日志到云。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们的代码灵活且松耦合，无需触及现有代码，就可以随时改变 Logger 的实现来应对需求的变化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisLogger</span> <span class="keyword">implements</span> <span class="title">Logger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出 Log 日志到redis。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h5><hr><p>在使用 Laravel 框架时，我们可以利用它的服务容器来自动注入接口的实现。<br>我们先新建一个配置文件 <code>config/log.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;LOG_TARGET&#x27;</span>, <span class="string">&#x27;file&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;file&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;class&#x27;</span> =&gt; <span class="title class_">App\Logs\FileLogger</span>::<span class="variable language_">class</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;db&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;class&#x27;</span> =&gt; <span class="title class_">App\Logs\DBLogger</span>::<span class="variable language_">class</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;redis&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;class&#x27;</span> =&gt; <span class="title class_">App\Logs\RedisLogger</span>::<span class="variable language_">class</span>,</span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>并在 <code>app/Providers/AppServiceProvider.php</code> 添加以下代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$default</span> = <span class="title function_ invoke__">config</span>(<span class="string">&#x27;log.default&#x27;</span>);</span><br><span class="line">    <span class="variable">$logger</span> = <span class="title function_ invoke__">config</span>(<span class="string">&quot;log.<span class="subst">&#123;$default&#125;</span>.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">bind</span>(</span><br><span class="line">        <span class="title class_">\App\Contracts\LogInterface</span>::<span class="variable language_">class</span>, </span><br><span class="line">        <span class="variable">$logger</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从配置文件中读取默认 Logger，并将其绑定到 <code>LogInterface</code>。这样每当我们请求 Logger 接口时，容器都会解析它并返回默认的 Logger 实例。<br>默认 Logger 是在 <code>env()</code> 配置的，我们可以在不同的环境中使用不同的 Logger，例如本地环境中记录到文件、生产环境中记录到数据库。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><hr><p>接口允许我们创建松散耦合的代码，同时提供一定程度的抽象。它允许我们随时更改我们的实现，而无需更改它们的上下文。所以我们应该将应用程序中的所有可能会有变化的部分使用接口来实现。</p><p>在大型应用中，接口是很有帮助的。和提升的代码灵活性、可测试性相比，多敲几下键盘花费的时间就显得微不足道了。当你在不同的接口实现类之间切换如飞的时候，你的经理一定会被你的神速惊到。此外，你也能够写出更能适应变化的代码。</p><p>当然，你如果在中小型项目中，不喜欢使用接口原则那也没什么不对，记住「Code Happy」快乐撸码。不过还是建议你在闲暇时间好好评估一下这件事。<br>enjoy 🎉<br>————————————————<br>原文作者：MArtian<br>转自链接：<a href="https://learnku.com/articles/67827">https://learnku.com/articles/67827</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;你也许听过面向接口编程，而不是面向对象编程的设计思想，如 代码到接口，而不是实现，程序到接口，使用抽象而不是具体化等。&lt;br&gt;这些所指的都是同一件事，在开发中我们的应用程序应该依赖于抽象（接口）而不是具体的（类）。&lt;/p&gt;
&lt;/blockquote</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mysql常用操作</title>
    <link href="http://example.com/2022/05/10/Mysql%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2022/05/10/Mysql%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2022-05-10T07:50:21.952Z</published>
    <updated>2022-05-16T03:30:35.628Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些常用和效率快一点的sql</p><ul><li>Mysql对同一张表删除重复数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> w <span class="keyword">FROM</span> subscribe_msg_list w <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> ( <span class="keyword">SELECT</span> <span class="operator">*</span>, <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> cc <span class="keyword">FROM</span> subscribe_msg_list <span class="keyword">GROUP</span> <span class="keyword">BY</span> type, user_id, <span class="type">time</span> <span class="keyword">HAVING</span> cc <span class="operator">&gt;</span> <span class="number">1</span> ) t <span class="keyword">ON</span> w.id <span class="operator">=</span> t.id;</span><br></pre></td></tr></table></figure></li><li>MySQL8 开启慢查询日志，并记录到表中。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_query%&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_output <span class="operator">=</span> <span class="string">&#x27;TABLE&#x27;</span>; <span class="comment">--  开启慢日志,纪录到 mysql.slow_log 表</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time <span class="operator">=</span> <span class="number">1</span>; <span class="comment">--  设置超过1秒的查询为慢查询</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>; <span class="comment">--  打开慢日志记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span> ( sql_text <span class="keyword">USING</span> utf8 ) sql_text <span class="keyword">FROM</span> mysql.slow_log <span class="comment">-- 查询慢sql的 日志</span></span><br></pre></td></tr></table></figure></li><li>MySQL group by 统计每5分钟数据量<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">concat(from_unixtime(create_time <span class="operator">-</span> create_time <span class="operator">%</span> <span class="number">300</span>), <span class="string">&#x27; ~ &#x27;</span>, from_unixtime(create_time <span class="operator">-</span> create_time <span class="operator">%</span> <span class="number">300</span> <span class="operator">+</span> <span class="number">300</span>)) <span class="keyword">as</span> <span class="keyword">period</span>,</span><br><span class="line"><span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> record_count</span><br><span class="line">  <span class="keyword">from</span> 打卡日志表</span><br><span class="line">  <span class="keyword">WHERE</span> create_time <span class="keyword">BETWEEN</span> <span class="number">1603123200</span> <span class="keyword">and</span> <span class="number">1603209599</span></span><br><span class="line">  <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">period</span></span><br><span class="line">  <span class="keyword">order</span> <span class="keyword">by</span> record_count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li><li>Mysql 查询数据是否存在<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### 差：</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tab_record <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> b<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">### 优：</span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> tab_record <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> b<span class="operator">=</span><span class="number">1</span> limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;整理一些常用和效率快一点的sql&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mysql对同一张表删除重复数据&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>有赞云对接Api</title>
    <link href="http://example.com/2022/05/10/%E5%AF%B9%E6%8E%A5%E6%9C%89%E8%B5%9E%E4%BA%91API%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/05/10/%E5%AF%B9%E6%8E%A5%E6%9C%89%E8%B5%9E%E4%BA%91API%E8%AE%B0%E5%BD%95/</id>
    <published>2022-05-10T06:34:40.342Z</published>
    <updated>2022-05-10T07:49:28.655Z</updated>
    
    <content type="html"><![CDATA[<p>关于获取无容器自主开发/有容器定制开发 不是太懂，具体对接的时候再了解。</p><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><p>YouzanYun SDK</p><ul><li>引入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer require youzanyun/open-sdk</span><br></pre></td></tr></table></figure></li><li>使用<br>详情参考 <a href="https://github.com/youzan/open-sdk-php/tree/620b89e06a13c6e33b117ca0812d2743dd29d4a6/examples">examples</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于获取无容器自主开发/有容器定制开发 不是太懂，具体对接的时候再了解。&lt;/p&gt;
&lt;h4 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;PHP&lt;/h4&gt;&lt;p&gt;YouzanYun SDK&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git飞行日记</title>
    <link href="http://example.com/2022/05/09/Git%E9%A3%9E%E8%A1%8C%E6%97%A5%E8%AE%B0/"/>
    <id>http://example.com/2022/05/09/Git%E9%A3%9E%E8%A1%8C%E6%97%A5%E8%AE%B0/</id>
    <published>2022-05-09T09:02:47.495Z</published>
    <updated>2022-05-10T05:46:56.274Z</updated>
    
    <content type="html"><![CDATA[<p>我是优秀的文档搬运工～～～</p><h6 id="编辑提交-editting-commits"><a href="#编辑提交-editting-commits" class="headerlink" title="编辑提交(editting commits)"></a>编辑提交(editting commits)</h6><ul><li>我刚才提交了什么?</li></ul><ul><li>如果你用 git commit -a 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。 你就可以用下面的命令显示当前HEAD上的最近一次的提交(commit):<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git show</span><br></pre></td></tr></table></figure></li><li>或者<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -n1 -p</span><br></pre></td></tr></table></figure></li><li>我的提交信息(commit message)写错了</li><li>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --only</span><br></pre></td></tr></table></figure></li><li>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --only -m <span class="string">&#x27;xxxxxxx&#x27;</span></span><br></pre></td></tr></table></figure></li><li>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</li><li>我提交(commit)里的用户名和邮箱不对</li><li>如果这只是单个提交(commit)，修改它：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --author <span class="string">&quot;New Authorname &lt;authoremail@mydomain.com&gt;&quot;</span></span><br></pre></td></tr></table></figure></li><li>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</li><li>我想从一个提交(commit)里移除一个文件</li><li>通过下面的方法，从一个提交(commit)里移除一个文件:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD^ myfile</span><br><span class="line">$ git add -A</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure></li><li>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</li></ul><p>More info: <a href="https://github.com/k88hudson/git-flight-rules">Github</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我是优秀的文档搬运工～～～&lt;/p&gt;
&lt;h6 id=&quot;编辑提交-editting-commits&quot;&gt;&lt;a href=&quot;#编辑提交-editting-commits&quot; class=&quot;headerlink&quot; title=&quot;编辑提交(editting commits)&quot;&gt;&lt;/a&gt;编</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git仓库初始化</title>
    <link href="http://example.com/2022/05/09/Git%E4%BB%93%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://example.com/2022/05/09/Git%E4%BB%93%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2022-05-09T08:30:38.568Z</published>
    <updated>2022-05-09T09:02:35.066Z</updated>
    
    <content type="html"><![CDATA[<p>经常会面临当新建一个仓库怎么把已有项目的代码push过去，就忘记怎么搞了，这里记录一下。</p><ul><li>在命令行创建新的仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# seven&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M master</span><br><span class="line">git remote add origin &lt;你的仓库地址&gt;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li>从命令行推送现有存储库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;你的仓库地址&gt;</span><br><span class="line">git branch -M master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经常会面临当新建一个仓库怎么把已有项目的代码push过去，就忘记怎么搞了，这里记录一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在命令行创建新的仓库&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>好久不见</title>
    <link href="http://example.com/2022/05/09/%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B/"/>
    <id>http://example.com/2022/05/09/%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B/</id>
    <published>2022-05-09T08:09:20.509Z</published>
    <updated>2022-05-09T08:34:54.759Z</updated>
    
    <content type="html"><![CDATA[<p>好久不见呀，初步算起，自己来到杭州已经多半年了。想起刚来的时候面试，经历过被虐的体无完肤、自我怀疑，最后成功入职了公司，也算是磕磕绊绊一路走来，学到了很多东西，也认识了很多优秀的人。以后打算每天会整理一些技术性的文章或者遇到的问题放到这里面，坚持早上更新一篇，文笔不好也不会写，以后再补充吧，冲冲冲！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久不见呀，初步算起，自己来到杭州已经多半年了。想起刚来的时候面试，经历过被虐的体无完肤、自我怀疑，最后成功入职了公司，也算是磕磕绊绊一路走来，学到了很多东西，也认识了很多优秀的人。以后打算每天会整理一些技术性的文章或者遇到的问题放到这里面，坚持早上更新一篇，文笔不好也不会</summary>
      
    
    
    
    
  </entry>
  
</feed>
